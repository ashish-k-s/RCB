from langchain_openai import ChatOpenAI 
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_community.llms import Ollama
import streamlit as st
import os
from dotenv import load_dotenv
import logging
import re
import csv
import sys
from io import StringIO

response = ""
outline = ""
course_outline_file = "TEMP-outline.adoc"
course_structure_file_names = "TEMP-course_structure_file_names.csv"
prompt_course_outline = """
You are a Course Designer expert in understanding the requirements of the curriculum and developing the course outline.
**You always write the course outline in AsciiDoc-formatted text inside a code block.**
Your job is **not** to write the course content. You follow the below rules to write course outline:
    - Refer to the provided list of course objectives and available context.
    - Curate the text in provided objectives.
    - Derive the sub-topics to be covered to fulfil the provided list of objectives.
    - **Always Restrict the structure to have only one level of sub-topics.**
    - **Derive heading for the course.**
    - Separate the layout to different topic and sub-topic as necessary.
    - **Include the section for hands-on lab when it is required.**
    - Respond with the curated list of objectives and sub-topics to be covered under each of the objectives.
    - Provide the output in a codeblock in AsciiDoc (.adoc) format.
    - **Always** use the below AsciiDoc syntax:
        - Heading H1 with symbol "=" for course heading
        - Heading H2 with symbol "==" for topic
        - Bullet with symbol "-" for sub-topic
    - Do not pre-fix "Objective" or "Module" or "Chapter" or any other such string in the generated output.
    - Do not number the topics, or add underline or any other decorations.
    - Provide topics and sub-topics in the form of bullets and sub-bullets.
    - Do not include any introductory or closing text in your response.
"""

prompt_page_summary = """

"""

prompt_detailed_content = """

"""

# Function to extract code block from the response generated by LLM.
def extract_code_blocks(text):
    # Match content between triple backticks
    code_blocks = re.findall(r'```(?:[a-zA-Z0-9]*\n)?(.*?)```', text, re.DOTALL)
    return code_blocks

# START: Code to generate filenames for each topic in the course outline.
def generate_filename(text):
    # Convert to lowercase
    text = text.lower()
    
    # Replace special characters with space
    text = re.sub(r'[^\w\s-]', '', text)
    
    # Replace whitespace with a single hyphen
    text = re.sub(r'\s+', '-', text.strip())

    # Remove leading/trailing hyphens
    text = text.strip('-')

    return text

def multiline_to_csv(input_text):
    output = StringIO()
    writer = csv.writer(output, quoting=csv.QUOTE_ALL)
    writer.writerow(["original_text", "filename"])

    for line in input_text.strip().splitlines():
        clean_line = line.strip()
        if clean_line:  # skip empty lines
            filename = generate_filename(clean_line)
            writer.writerow([clean_line, filename])

    return output.getvalue()

# END: Code to generate filenames for each topic in the course outline.

# LOGGING SETUP
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_dotenv()
## os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_API_KEY"] = os.getenv("LANGCHAIN_API_KEY")

prompt = ChatPromptTemplate.from_messages(
    [
        ("system", prompt_course_outline),
        ("user", """
        Here are the list of objectives for which course outline is to be created: 
        {objectives}
        """)

    ]
)

## streamlit framework

st.title("Rapid Course Builder (RCB)")
text_input = st.chat_input("Enter the list of training objectives:")

## ollama llama3
llm = Ollama(model="granite3.3:8b")
output_parser = StrOutputParser()


print("prompt: ", prompt)

logger.info(f"PROMPT: {prompt}")

chain = prompt | llm | output_parser

if text_input:
    response = chain.invoke({"objectives": text_input})
    print("RESPONSE: ", response)
    st.write(response)


outline = extract_code_blocks(response)

## Write course outline to an AsciiDoc file
with open(course_outline_file, "w") as file:
    for line in outline:
        file.write(line + "\n")

## START: Derive name of the files for course structure

## Read outline.adoc in string
with open(course_outline_file, 'r', encoding='utf-8') as file:
    outline_file_content = file.read()

print(outline_file_content)

csv_output = multiline_to_csv(outline_file_content)
print(csv_output)

with open(course_structure_file_names, 'w', encoding='utf-8') as file:
    file.write(csv_output)

## END: Derive name of the files for course structure


## START: Generate course layout

## END: Generate course layout
