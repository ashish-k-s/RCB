import streamlit as st
from PIL import Image
from io import BytesIO
import subprocess
import os
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.llms import Ollama
from langchain_core.output_parsers import StrOutputParser

st.set_page_config(
    page_title="Image using RCB"
)

PROJECT_NAME = ""
d2_code = ""

st.title("Create Image with RCB")
st.sidebar.success("Select a page above.")

system_prompt_generate_image = """
You are an expert in generating diagrams using D2Lang (version 0.7.0).  
Your ONLY output must be a valid D2 code block.  

Rules:
- Do not include explanations, comments, or any text outside the code block.  
- Use only valid D2 syntax (v0.7.0).  
- Use container blocks for grouping.  
- Use directional arrows (-->, <--, <->) for relationships.  
- Keep diagrams clean and logically structured.  

If the description is unclear, make reasonable assumptions, but ALWAYS output valid D2.

"""

user_prompt_generate_image = """
Generate the D2 code for the following diagram description:  
{image_prompt}

"""

d2_image_name_str = "rcb_generated_image"
if 'd2_image_path' not in st.session_state:
    st.session_state.d2_image_path = '/tmp/' + d2_image_name_str + '.png'
if 'd2_image_code_path' not in st.session_state:
    st.session_state.d2_code_path = '/tmp/' + d2_image_name_str + '.d2'
if 'd2_image_code' not in st.session_state:
    st.session_state.d2_image_code = ""

def build_prompt(system_prompt: str, image_prompt:str):
    return ChatPromptTemplate.from_messages(
        [
            ("system", system_prompt),
            ("user", image_prompt)

        ]
    )

def generate_image_code():
    with st.spinner("Generating code for image..."):
        prompt = build_prompt(
            system_prompt_generate_image,
            user_prompt_generate_image
        )
        chain = prompt | llm | output_parser
        # Call the LLM to generate response
        response = chain.invoke({"image_prompt": image_prompt})
        print("D2LANG CODE: \n", response)
        # st.write(response)
        st.session_state.d2_image_code = response
        update_d2_image_code()

    render_image_from_code()

def render_image_from_code():
    print(f"d2_image_code:\n{st.session_state.d2_image_code}")
    print(f"d2_image_path:{st.session_state.d2_image_path}")
    print(f"d2_code_path:{st.session_state.d2_code_path}")
    #update_d2_image_code()
    if st.session_state.d2_image_code:
        if os.path.exists(st.session_state.d2_image_path):
            os.remove(st.session_state.d2_image_path)

        result = subprocess.run (['d2', st.session_state.d2_code_path, st.session_state.d2_image_path], capture_output=True, text=True)
        print(f"Result of d2 command: {result}")
        if result.returncode != 0:
            st.warning(f"Image generation failed due to the following error: \n {result.stderr}")
            st.warning("\nTweaking existing D2 code or generate new code.")
    try:
        if st.session_state.d2_image_path:
            img = Image.open(st.session_state.d2_image_path)
    except FileNotFoundError:
        st.error(f"Image file not found. Please ensure image generation is successful.")
        st.stop() # Stop the app if the image isn't found

    # Display the image
    st.image(img, caption="Image generated by RCB", use_container_width=True)

    # Create a download button
    # Convert the image to bytes for download
    buf = BytesIO()
    img.save(buf, format="PNG") # Save in your desired format (e.g., JPEG, PNG)
    byte_im = buf.getvalue()

    st.markdown("Note:: When you click the Download button, the image will temporarily disappear from the page. This is normal behavior. You can still save the file to your device. If you wish to view the same image again, simply click the Render Image button to regenerate it on the page.")
    st.download_button(
        label="Download Image",
        data=byte_im,
        file_name=d2_image_name_str+".png", # Desired filename for download
        mime="image/png" # MIME type corresponding to the image format
    )

def update_d2_image_code():
    d2_image_code = st.session_state.d2_image_code
    if d2_image_code:
        print(f"WRITING CONTENT TO FILE: {st.session_state.d2_code_path} \n CONTENT: \n {st.session_state.d2_image_code}")
        with open(st.session_state.d2_code_path, "w") as f:
            f.write(st.session_state.d2_image_code)
    st.rerun()

llm = Ollama(model="granite3.3:8b")
##llm = Ollama(model="codellama:7b")
output_parser = StrOutputParser()


image_prompt = st.text_area(
    "Write detailed description for the image to be generated:",
    placeholder="Write the description of the image to be generated here...",
    height=30,
    key="image_prompt",
    #disabled=st.session_state.show_logs
)

generate_image = st.button("Generate Image")

st.session_state.d2_image_code = st.text_area(
   "Write or edit your d2lang code here:",
    placeholder="Write your d2lang code here...",
    value=st.session_state.d2_image_code,
    height=300,
    key="st.session_state.d2_image_code",
    on_change=update_d2_image_code
    )
 
render_image = st.button("Render Image")

if generate_image:
    generate_image_code()
    render_image_from_code()

if render_image:
    render_image_from_code()

