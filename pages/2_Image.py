import streamlit as st
from PIL import Image
from io import BytesIO
import subprocess
import os
from dotenv import load_dotenv
import google.generativeai as genai

from langchain_openai import ChatOpenAI
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.llms import Ollama
from langchain_core.output_parsers import StrOutputParser

from rcb_init import init_page, init_llm
from rcb_llm_manager import call_llm_to_generate_response

st.set_page_config(
    page_title="Image using RCB"
)

st.title("Create Image with RCB")
init_page()
init_llm()

d2_image_name_str = "rcb_generated_image"
if 'd2_image_path' not in st.session_state:
    st.session_state.d2_image_path = st.session_state.user_dir + d2_image_name_str + '.png'
if 'd2_code_path' not in st.session_state:
    st.session_state.d2_code_path = st.session_state.user_dir + d2_image_name_str + '.d2'
if 'd2_image_code' not in st.session_state:
    st.session_state.d2_image_code = ""
if 'user_prompt' not in st.session_state:
    st.session_state.user_prompt = ""

system_prompt_generate_image = """
You are an expert in generating diagrams using D2Lang.  
Your ONLY output must be a valid D2 code block.  

Rules:
- Do not include explanations, comments, or any text outside the code block.
- Use only valid D2 syntax.
- No incomplete direction blocks.
- **Do not use** labels.
- Use directional arrows (-->, <--, <->) for relationships.
- Use container only to group nodes visually.
- Use directional arrows for relationships.  
- **Never use** "=" for assignments, use yaml style ":" assignments instead.
- No incomplete assignments.
- Do not leave any dangling references or unspecified connections.
- Keep diagrams clean and logically structured.
- ALWAYS output valid D2.
- Ensure the file compiles without errors using the d2 CLI.
- At the end, verify that every connection is between two explicitly defined nodes, and rewrite if needed.

"""

user_prompt_generate_image = f"""
Generate the D2 code for the following diagram description:  
{st.session_state.user_prompt}

"""

def generate_image_code():
    with st.spinner("Generating code for image..."):
        st.session_state.d2_image_code = call_llm_to_generate_response(st.session_state.model_choice, system_prompt_generate_image, user_prompt_generate_image)
        print("D2LANG CODE: \n", st.session_state.d2_image_code)
        update_d2_image_code()

def render_image_from_code():
    print(f"d2_image_code:\n{st.session_state.d2_image_code}")
    print(f"d2_image_path:{st.session_state.d2_image_path}")
    print(f"d2_code_path:{st.session_state.d2_code_path}")
    # update_d2_image_code()
    if st.session_state.d2_image_code:
        # if os.path.exists(st.session_state.d2_image_path):
        #     os.remove(st.session_state.d2_image_path)
        with open(st.session_state.d2_code_path, "w") as f:
            f.write(st.session_state.d2_image_code)

        result = subprocess.run (['d2', st.session_state.d2_code_path, st.session_state.d2_image_path], capture_output=True, text=True)
        print(f"Result of d2 command: {result}")
        if result.returncode != 0:
            st.warning(f"Image generation failed due to the following error: \n {result.stderr}")
            st.warning("\nTweaking existing D2 code or generate new code.")
    try:
        if st.session_state.d2_image_path:
            img = Image.open(st.session_state.d2_image_path)
    except FileNotFoundError:
        st.error(f"Image file not found. Please ensure image generation is successful.")
        st.stop() # Stop the app if the image isn't found

    # Display the image
    st.image(img, caption="Image generated by RCB", use_container_width=True)

    # Create a download button
    # Convert the image to bytes for download
    buf = BytesIO()
    img.save(buf, format="PNG") # Save in your desired format (e.g., JPEG, PNG)
    byte_im = buf.getvalue()

    st.markdown("Note:: When you click the Download button, the image will temporarily disappear from the page. This is normal behavior. You can still save the file to your device. If you wish to view the same image again, simply click the Render Image button to regenerate it on the page.")
    st.download_button(
        label="Download Image",
        data=byte_im,
        file_name=d2_image_name_str+".png", # Desired filename for download
        mime="image/png" # MIME type corresponding to the image format
    )

def update_d2_image_code():
    if st.session_state.d2_image_code:
        print(f"WRITING CONTENT TO FILE: {st.session_state.d2_code_path} \n CONTENT: \n {st.session_state.d2_image_code}")
        with open(st.session_state.d2_code_path, "w") as f:
            f.write(st.session_state.d2_image_code)
    st.rerun()

# --- MaaS configuration ---
load_dotenv()

MAAS_API_KEY = os.environ["MAAS_API_KEY"]
MAAS_API_BASE = os.environ["MAAS_API_BASE"]
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
GEMINI_API_BASE = os.environ.get("GEMINI_API_BASE")

user_prompt_text = st.text_area(
    "Write detailed description for the image to be generated:",
    placeholder="Write the description of the image to be generated here...",
    height=30,
    key="user_prompt_text",
    disabled=st.session_state.disable_all
)

generate_image = st.button("Generate Image code", disabled=st.session_state.disable_all)

st.session_state.d2_image_code = st.text_area(
   "Write or edit your d2lang code here:",
    placeholder="Write your d2lang code here...",
    value=st.session_state.d2_image_code,
    height=300,
    key="st.session_state.d2_image_code",
    on_change=update_d2_image_code,
    disabled=st.session_state.disable_all
    )
 
render_image = st.button("Render Image", disabled=st.session_state.disable_all)

if generate_image:
    st.session_state.user_prompt = user_prompt_text
    print(f"Generating image code for User Prompt: {st.session_state.user_prompt}")    
    if not st.session_state.user_prompt.strip():
        st.warning("Please enter a description for the image to be generated.")
        st.stop()

    user_prompt_generate_image = f"""
    Generate the D2 code for the following diagram description:  
    {st.session_state.user_prompt}

    """
    generate_image_code()
    #render_image_from_code()

if render_image:
    render_image_from_code()

